numbers[c(4,5)] = 2 #changing values
numbers
sort(numbers) #sorts vector
add3 = seq(from = 3, to = 27, by 3)
add3
add3 = seq(from = 3, to = 27, by = 3)
add3
evens = seq(from = 2, by = 2, length.out = 10)
evens
sprintf("Is 4 in evens?: %s", 4 %in% evens)
rep(x = 2, times = 5, each = 2)
rep(x= c(1,2,3), times = 5, each = 3)
rep(x= c(1,2,3), times = 2, each = 3)
is_even = one_to_20 %% 2 == 0
is_even
one_to_20 = c(1:20)
#Relational Operations
is_even = one_to_20 %% 2 == 0
is_even
one_to_20 = c(1:20)
#Relational Operations
is_even = one_to_20 %% 2 == 0
is_even #boolean array
just_evens = one_to_20[one_to_20 %% 2 == 0]
just_evens
cat("kill", " yourself")
cat("kill", "yourself")
cat("kill","yourself")
dead = 1
if(dead) print("You are dead")
str1 = "This is a string"
nchar(str1)
str2 = paste("co", "ol", sep = "") #another way to concatenate
str2
str2 = paste("co", "ol", sep = "") #another way to concatenate
str2
substr(x = str2, start = 3, end = 4)
str2 = paste("co", "ol", sep = "") #another way to concatenate
str2
substr(x = str2, start = 3, stop = 4)
sub(pattern = "dead", replacement = "alive", x = "You are dead")
gsub(pattern = "jaja", replacement = "haha", x = "jaja jaja")
strVect = strsplit("A dog ran fast", " ")
strVect = strsplit("A dog ran fast", " ")
strVect
custData = data.frame(name = c("Eli", "Phil", "Daniel"),
age = c(38, 60, 23),
stringsAsFactors = F)
custData
#Data Frame
custData = data.frame(name = c("Eli", "Phil", "Daniel"),
age = c(38, 60, 23),
stringsAsFactors = F)
custData
#n*n matrix of data
custData[1,1]
custData[1]
custData = data.frame(name = c("Eli", "Phil", "Daniel"),
age = c(38, 60, 23),
stringsAsFactors = F)
custData
#n*n matrix of data
custData[1,1]
custData[1]
recordSaq = data.frame(name = "Saquon", age = 23)
custData = rbind(custData, recordSaq,
custData)
custData = data.frame(name = c("Eli", "Phil", "Daniel"),
age = c(38, 60, 23),
stringsAsFactors = F)
custData
#n*n matrix of data
custData[1,1]
custData[1]
recordSaq = data.frame(name = "Saquon", age = 23)
custData = rbind(custData, recordSaq)
custData
View(custData)
playData = data.frame(name = c("Eli", "Phil", "Daniel"),
age = c(38, 60, 23),
stringsAsFactors = F)
playData
#n*n matrix of data
playData[1,1]
playData[1]
recordSaq = data.frame(name = "Saquon", age = 23)
playData = rbind(playData, recordSaq) #adds row
playData
sbw = c(2,1,0,0)
playData = cbind(playData, sbw)
playData
View(playData)
#Data Frame
playData = data.frame(name = c("Eli", "Phil", "Daniel"),
age = c(38, 60, 23),
stringsAsFactors = F)
playData
#n*n matrix of data
playData[1,1]
playData[1]
recordSaq = data.frame(name = "Saquon", age = 23)
playData = rbind(playData, recordSaq) #adds row
playData
sbw = c(2,1,0,0)
playData = cbind(playData, sbw)
playData
wonSB = playData[playData$sbw > 0]
wonSB
playData = data.frame(name = c("Eli", "Phil", "Daniel"),
age = c(38, 60, 23),
stringsAsFactors = F)
playData
#n*n matrix of data
playData[1,1]
playData[1]
recordSaq = data.frame(name = "Saquon", age = 23)
playData = rbind(playData, recordSaq) #adds row
playData
sbw = c(2,1,0,0)
playData = cbind(playData, sbw)
playData
wonSB = playData[playData$sbw > 0,]
wonSB
#Repeat loop
num = 1
repeat{
print(num)
num = num + 1
if(num > 5) break
}
first_var = 5 #R automatically detects data type
#class() gives data type
print(class(4)) #int / numeric
print(class(4L)) #another int
print(class(T)) #boolean / logical
print(class(1 + 4i)) #complex
print(class("Sample")) #character
print(class(charToRaw("Sample"))) #Raw bytes of char
is.integer(first_var) #checks if integer
is.numeric(first_var) #checks if numeric
#there are many more
#to concert to another data type
as.integer(first_var) #only if possible
#Arithmetic
sprintf("4 + 5 = %d", 4 + 5)
sprintf("4 - 5 = %d", 4 - 5)
sprintf("4 * 5 = %d", 4 * 5)
sprintf("4 / 5 = %1.3f", 4 / 5)
sprintf("5 %% 4 = %d", 5 %% 4)
sprintf("4^2 = %d", 4^2)
#Very similar to C
#vectors
numbers = c(3,2,1,0,8)
numbers #prints vector
numbers[1] #prints 1st element
#vectors are 1-based as opposed to 0-based in other languages
#number[1] = 3, numbers[2] = 2
length(numbers) #prints length of vector
numbers[length(numbers)] #last index
numbers[-1] #prints every element except negative value (1)
numbers[c(1, 2)] #this is a vector that tells what values to print
numbers[1:2] #same as above
numbers[4] = 7
numbers
numbers[c(4,5)] = 2 #changing values
numbers
sort(numbers) #sorts vector
#sequence
add3 = seq(from = 3, to = 27, by = 3)
add3 # 3 6 9 12 ... 24 27
evens = seq(from = 2, by = 2, length.out = 10)
evens # 2 4 6 8 10 12 14 16 18 20
sprintf("Is 4 in evens?: %s", 4 %in% evens)
rep(x = 2, times = 5, each = 2) #repeat
rep(x= c(1,2,3), times = 2, each = 3)
one_to_20 = c(1:20)
#Relational Operations
is_even = one_to_20 %% 2 == 0
is_even #boolean array
just_evens = one_to_20[one_to_20 %% 2 == 0]
just_evens
dead = 1
if(dead) print("You are dead") #if works the same
#Switch works all in one function
grade = "C"
switch(grade,
"A" = print("Great"),
"B" = print("Good"),
"C" = print("Ok"),
"D" = print("Bad"),
"F" = print("Terrible"),
print("No such grade"))
switch(dead, 1 = print("You are Dead"), 0 = print())
#String
str1 = "This is a string"
nchar(str1) #number of chars in str1
cat("kill","yourself") #concatenates strings with a space in between
str2 = paste("co", "ol", sep = "") #another way to concatenate
str2
substr(x = str2, start = 3, stop = 4)
sub(pattern = "dead", replacement = "alive", x = "You are dead")
#substitutes a substring with another substring
gsub(pattern = "jaja", replacement = "haha", x = "jaja jaja")
#We can split a string into a vector / array
strVect = strsplit("A dog ran fast", " ")
strVect
#strsplit seperates a string by the given token
#Data Frame
playData = data.frame(name = c("Eli", "Phil", "Daniel"),
age = c(38, 60, 23),
stringsAsFactors = F)
playData
#n*n matrix of data
playData[1,1]
playData[1]
recordSaq = data.frame(name = "Saquon", age = 23)
playData = rbind(playData, recordSaq) #adds row
playData
sbw = c(2,1,0,0)
playData = cbind(playData, sbw)
playData
wonSB = playData[playData$sbw > 0,]
wonSB
#Repeat loop
num = 1
repeat{
print(num)
num = num + 1
if(num > 5) break
}
#for
for(i in one_to_20) print(i)
matrix1 = matrix(data = c(1,2,3,4), nrow = 2, ncol = 2)
matrix1
matrix3 = rbind(1:3, 4:6, 7:9)
matrix3
matrix3 = rbind(1:3, 4:6, 7:9)
matrix3
matrix3[1,] #gives entire first row
matrix[,2] #entire second column
arr1 = array(data = 1:8, dim = c(2,2,2,))
arr1
arr1 = array(data = 1:8, dim = c(2,2,2))
arr1
#Function
getSum(num1, num2){
return(num1+num2)
}
sprintf("%d", getSum(5,5))
#Function
getSum = function(num1, num2){
return(num1+num2)
}
sprintf("%d", getSum(5,5))
#there is a function that turns a var name into a function
#many arguments
getSumMult = function(...){
numList = list(...)
sum = 0
for(i in numList){
sum = sum + i
}
sum
}
getSumMult(1,2,3,4)
addFunc = list(
add1 = function(x) x+1
add2 = function(x) x+2
add3 = function(x) x+3
)
addFunc$add2(5)
getSumMult(1,2,3,4) # = 10
addFunc = list(
add1 = function(x) x+1,
add2 = function(x) x+2,
add3 = function(x) x+3
)
addFunc$add2(5)
tryCatch(
1/0
)
#Exception Handling
tryCatch(
a/4
)
tryCatch(
"a"/4
)
#File I/O
readData = read.table(file = file.choose(),
header = T, sep = " ",
na.strings = "'",
stringsAsFactors = F)
readData
#File I/O
readData = read.table(file = file.choose(),
header = T, sep = " ",
na.strings = "'",
stringsAsFactors = F)
readData
readData2 = read.csv(file = file.choose(),
header = T, sep = " ",
na.strings = "'",
stringsAsFactors = F)
readData2
#Plotting
xy1 = matrix(data = c(1,2,3,4,5,
1,2,3,4,5), nrow = 5, ncol = 5)
plot(xy1)
xy1 = matrix(data = c(1,2,3,4,5,
1,2,3,4,5), nrow = 5, ncol = 5)
plot(xy1)
plot(xy1, type = "l")
#Plotting
xy1 = matrix(data = c(1,2,3,4,5,
1,2,3,4,5), nrow = 5, ncol = 5)
plot(xy1)
plot(xy1, type = "l") #line through points
plot(xy1, type = "b") #both line and points
plot(xy1, type = "o") #same as b but no spaces between line and points
#Plotting
xy1 = matrix(data = c(1,2,3,4,5,
1,2,3,4,5), nrow = 5, ncol = 5)
plot(xy1)
plot(xy1, type = "l") #line through points
plot(xy1, type = "b") #both line and points
plot(xy1, type = "o",
main = "Plot", xlab = "x axis",
ylab = "y axis") #same as b but no spaces between line and points
format that rmconsole prints in
#Plotting
xy1 = matrix(data = c(1,2,3,4,5,
1,2,3,4,5), nrow = 5, ncol = 5)
plot(xy1)
plot(xy1, type = "l") #line through points
plot(xy1, type = "b") #both line and points
plot(xy1, type = "o",
main = "Plot", xlab = "x axis",
ylab = "y axis",
col = "steelblue") #same as b but no spaces between line and points
read.csv(file = file.choose(), header = T, sep",", stringsAsFactors = F)
read.csv(file = file.choose(), header = T, sep = ",", stringsAsFactors = F)
getOption("max.print")
qbstats = read.csv(file = file.choose(), header = T, sep = ",", stringsAsFactors = F)
qbstats
qbstats = read.csv(file = file.choose(), header = T, sep = ",", stringsAsFactors = F)
qbstats
qbstats[72]
library(bigmemory)
y = read.big.matrix(file = file.choose(), header=T, sep=",")
dim(y)
#coerce a big.matrix to a matrix
yy= as.matrix(y)
y = read.big.matrix(file = file.choose(), header=T, sep=",")
dim(y)
#coerce a big.matrix to a matrix
yy= as.matrix(y)
qbstats = read.csv(file = file.choose(), header = T, sep = ",", stringsAsFactors = F)
qbstats
qbstats[71]
library(data.table)
qbstats = fread(file = file.choose(), sep = ",")
qbstats
qbstats = read.csv(file = file.choose(), header = T, sep = ",", stringsAsFactors = F)
qbstats
qbstats[71]
qbstats = read.csv(file = file.choose(), header = T, sep = ",", stringsAsFactors = F)
qbstats
qbstats = read.csv(file = file.choose(), header = T, sep = ",", stringsAsFactors = F)
qbstats
options(max.print = 100000)
max.print
qbstats = read.csv(file = file.choose(), header = T, sep = ",", stringsAsFactors = F)
qbstats
qbstats = read.csv(file = file.choose(), header = T, sep = ",", stringsAsFactors = F)
qbstats
qbstats[7142]
qbstats = read.csv(file = file.choose(), header = T, sep = ",", stringsAsFactors = F)
qbstats
qbstats[7000]
qbstats = read.csv(file = file.choose(), header = T, sep = ",", stringsAsFactors = F)
qbstats
qbstats[3]
qbstats = read.csv(file = file.choose(), header = T, sep = ",", stringsAsFactors = F)
qbstats[1]
qbstats = read.csv(file = file.choose(), header = T, sep = ",", stringsAsFactors = F)
qbstats[,13188]
qbstats = read.csv(file = file.choose(), header = T, sep = ",", stringsAsFactors = F)
qbstats[13188,]
qbstats = read.csv(file = file.choose(), header = T, sep = ",", stringsAsFactors = F)
qbstats[13188,2]
qbstats = read.csv(file = "C:\Users\bshah\Downloads\QBStats_all", header = T, sep = ",", stringsAsFactors = F)
qbstats[13188,2]
qbstats = read.csv(file = "C:\Users\bshah\Downloads\QBStats_all", header = T, sep = ",", stringsAsFactors = F)
qbstats[13188,2]
qbstats = read.csv(file = "C:\Users\bshah\Downloads\QBStats_all", header = T, sep = ",", stringsAsFactors = F)
qbstats[13188,]
qbstats = read.csv(file = "C:\Users\bshah\Downloads\QBStats_all",
header = T, sep = ",", stringsAsFactors = F)
qbstats[13188,]
plot(qbstats)
xy1 = data.frame()
qbstats = read.csv(file = "C:\Users\bshah\Downloads\QBStats_all",
header = T, sep = ",", stringsAsFactors = F)
qbstats[13188,]
xy1 = data.frame()
xy1 = rbind(xy1, qbstats[1,])
qbstats = read.csv(file = "C:\Users\bshah\Downloads\QBStats_all",
header = T, sep = ",", stringsAsFactors = F)
qbstats[13188,]
xy1 = data.frame()
xy1 = rbind(xy1, qbstats[1,])
xy1
qbstats = read.csv(file = "C:\Users\bshah\Downloads\QBStats_all",
header = T, sep = ",", stringsAsFactors = F)
qbstats[13188,]
xy1 = data.frame()
xy1 = cbind(xy1, qbstats[1])
xy1
qbstats = read.csv(file = "C:\Users\bshah\Downloads\QBStats_all",
header = T, sep = ",", stringsAsFactors = F)
qbstats[13188,]
xy1 = data.frame()
xy1 = cbind(xy1[1], qbstats[1])
xy1
qbstats = read.csv(file = "C:\Users\bshah\Downloads\QBStats_all",
header = T, sep = ",", stringsAsFactors = F)
qbstats[13188,]
xy1 = data.frame()
xy1 = cbind(xy1, qbstats[1])
xy1
qbstats = read.csv(file = "C:\Users\bshah\Downloads\QBStats_all",
header = T, sep = ",", stringsAsFactors = F)
qbstats[13188,]
xy1 = data.frame(matrix(NA, nrow = 13188, ncol = 2))
xy1[1] = qbstats[1]
xy1
yards_per_game = data.frame(year = 1996:2016)
pass_yards_per_game = data.frame(year = 1996:2016,
pypg = c(170.900161, 168.730169, 165.242991, 174.505393,
171.282813, 178.991817, 178.814529, 163.153846,
177.990741, 175.386185, 181.090935, 181.463224,
183.332268, 176.599001, 193.513600, 204.120521,
208.528146, 217.704584, 209.250000, 224.136824,
213.921311))
plot((pass_yards_per_game))
pass_yards_per_game = data.frame(year = 1996:2016,
pypg = c(170.900161, 168.730169, 165.242991, 174.505393,
171.282813, 178.991817, 178.814529, 163.153846,
177.990741, 175.386185, 181.090935, 181.463224,
183.332268, 176.599001, 193.513600, 204.120521,
208.528146, 217.704584, 209.250000, 224.136824,
213.921311))
plot(pass_yards_per_game, type = "o")
pass_yards_per_game = data.frame(Year = 1996:2016,
PYPG = c(170.900161, 168.730169, 165.242991, 174.505393,
171.282813, 178.991817, 178.814529, 163.153846,
177.990741, 175.386185, 181.090935, 181.463224,
183.332268, 176.599001, 193.513600, 204.120521,
208.528146, 217.704584, 209.250000, 224.136824,
213.921311))
plot(pass_yards_per_game, type = "o", main = "Pass Yds/Gm 1996-2016")
qbstats = read.csv(file = "C:\Users\bshah\Downloads\QBStats_all",
header = T, sep = ",", stringsAsFactors = F)
qbstats[13188,]
xy1 = data.frame(matrix(NA, nrow = 13188, ncol = 2))
xy1[1] = qbstats[1]
xy1
pass_yards_per_game = data.frame(Year = 1996:2016,
PYPG = c(170.900161, 168.730169, 165.242991, 174.505393,
171.282813, 178.991817, 178.814529, 163.153846,
177.990741, 175.386185, 181.090935, 181.463224,
183.332268, 176.599001, 193.513600, 204.120521,
208.528146, 217.704584, 209.250000, 224.136824,
213.921311))
plot(pass_yards_per_game, type = "o", main = "Pass Yds/Gm 1996-2016",
col = "steelblue")
yds_per_att = data.frame(Year = 1996:2016,
YPA = c(6.58921095, 6.740705128, 6.768535826, 6.553775039,
6.82065, 7.13207856, 6.621329212, 6.594419306,
6.776697531, 6.83155416, 6.714032258, 6.750234742,
7.032587859,6.793740686, 6.75904, 7.194136808,
7.14486755, 7.191680815, 7.308279221, 7.255912162,
7.086065574))
plot(yards_per_att, type = "o", main = "Yds/Attempt 1996-2016",
col = "steelblue")
yds_per_att = data.frame(Year = 1996:2016,
YPA = c(6.58921095, 6.740705128, 6.768535826, 6.553775039,
6.82065, 7.13207856, 6.621329212, 6.594419306,
6.776697531, 6.83155416, 6.714032258, 6.750234742,
7.032587859,6.793740686, 6.75904, 7.194136808,
7.14486755, 7.191680815, 7.308279221, 7.255912162,
7.086065574))
plot(yards_per_att, type = "o", main = "Yds/Attempt 1996-2016",
col = "steelblue")
yds_per_att = data.frame(Year = 1996:2016,
YPA = c(6.58921095, 6.740705128, 6.768535826, 6.553775039,
6.82065, 7.13207856, 6.621329212, 6.594419306,
6.776697531, 6.83155416, 6.714032258, 6.750234742,
7.032587859,6.793740686, 6.75904, 7.194136808,
7.14486755, 7.191680815, 7.308279221, 7.255912162,
7.086065574))
plot(yds_per_att, type = "o", main = "Yds/Attempt 1996-2016",
col = "steelblue")
int_per_gm = data.frame(Year = 1996:2016,
INTs = c(0.866345, 0.767628, 0.792835, 0.865948, 0.823438,
0.888707, 0.809892, 0.799397, 0.808642, 0.794349,
0.838710, 0.829421, 0.742812, 0.798165, 0.817600,
0.824104, 0.774834, 0.847199, 0.730519, 0.736486,
0.67541))
plot(int_per_gm, type = "o", main = "Int/Gm 1996-2016",
col = "steelblue")
